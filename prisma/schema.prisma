generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                                          DateTime @db.Date
  time                                          DateTime @db.Time(6)
  status                                        String   @db.VarChar(255)
  guest_id                                      String   @db.Uuid
  healthcare_provider_id                        String   @db.Uuid
  created_at                                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime @default(now()) @db.Timestamp(6)
  user_appointment_guest_idTouser               user     @relation("appointment_guest_idTouser", fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointment_guest")
  user_appointment_healthcare_provider_idTouser user     @relation("appointment_healthcare_provider_idTouser", fields: [healthcare_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointment_healthcare_provider")
}

model insurance_plan {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan_name             String   @db.VarChar(255)
  coverage              Int
  premium               Int
  deductible            Int
  out_of_pocket_maximum Int
  insurance_provider_id String   @db.Uuid
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @default(now()) @db.Timestamp(6)
  user                  user     @relation(fields: [insurance_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_insurance_plan_insurance_provider")
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organization_user")
}

model patient_record {
  id                                         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  medical_history                            String   @db.VarChar(255)
  current_condition                          String   @db.VarChar(255)
  medications                                String?  @db.VarChar(255)
  allergies                                  String?  @db.VarChar(255)
  immunization_record                        String?  @db.VarChar(255)
  medical_staff_id                           String   @db.Uuid
  guest_id                                   String   @db.Uuid
  created_at                                 DateTime @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime @default(now()) @db.Timestamp(6)
  user_patient_record_guest_idTouser         user     @relation("patient_record_guest_idTouser", fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_patient_record_guest")
  user_patient_record_medical_staff_idTouser user     @relation("patient_record_medical_staff_idTouser", fields: [medical_staff_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_patient_record_medical_staff")
}

model profile {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio            String?  @db.VarChar(255)
  specialization String?  @db.VarChar(255)
  experience     Int?
  education      String?  @db.VarChar(255)
  certifications String?  @db.VarChar(255)
  user_id        String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_profile_user")
}

model user {
  id                                                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                String           @unique @db.VarChar(255)
  firstName                                            String?          @db.VarChar(255)
  lastName                                             String?          @db.VarChar(255)
  roq_user_id                                          String           @db.VarChar(255)
  tenant_id                                            String           @db.VarChar(255)
  created_at                                           DateTime         @default(now()) @db.Timestamp(6)
  updated_at                                           DateTime         @default(now()) @db.Timestamp(6)
  appointment_appointment_guest_idTouser               appointment[]    @relation("appointment_guest_idTouser")
  appointment_appointment_healthcare_provider_idTouser appointment[]    @relation("appointment_healthcare_provider_idTouser")
  insurance_plan                                       insurance_plan[]
  organization                                         organization[]
  patient_record_patient_record_guest_idTouser         patient_record[] @relation("patient_record_guest_idTouser")
  patient_record_patient_record_medical_staff_idTouser patient_record[] @relation("patient_record_medical_staff_idTouser")
  profile                                              profile[]
}
